import Immutable from 'immutable';

import appUtils from '../../../app-utils';

import <%= componentNameCamel %>ActionTypes from './actions';

export class <%= componentName %>Reducer {

  static initialState = {
    isLoading: false,
    <%= componentNameCamel %>: Immutable.List(),
    <%= componentNameCamel %>CacheTime: undefined,
    <%= componentNameCamel %>CacheLink: undefined,
    errorMsg: undefined,
  };

  static reduce(state = <%= componentName %>Reducer.initialState, { type, payload }) {
    if (!<%= componentName %>Reducer[type]) {
      return state;
    }

    return <%= componentName %>Reducer[type](state, payload);
  }

  static [<%= componentNameCamel %>ActionTypes.INVALIDATE_CACHE](state) {
    return {
      ...state,
      <%= componentNameCamel %>CacheTime: null,
    };
  }

  static [<%= componentNameCamel %>ActionTypes.GET_<%= componentNameConstant %>](state) {
    return {
      ...state,
      isLoading: true,
      errorMsg: null,
    };
  }

  static [<%= componentNameCamel %>ActionTypes.SET_<%= componentNameConstant %>](state, payload) {
    return {
      ...state,
      <%= componentNameCamel %>: payload.<%= componentNameCamel %>,
      <%= componentNameCamel %>CacheTime: Date.now(),
      <%= componentNameCamel %>CacheLink: payload.<%= componentNameCamel %>Link,
    };
  }

  static [<%= componentNameCamel %>ActionTypes.LOADED_<%= componentNameConstant %>](state) {
    return {
      ...state,
      isLoading: false,
    };
  }

  static [<%= componentNameCamel %>ActionTypes.FAILED_TO_GET_<%= componentNameConstant %>](state, payload) {
    return {
      ...state,
      isLoading: false,
      <%= componentNameCamel %>: <%= componentName %>Reducer.initialState.<%= componentNameCamel %>,
      <%= componentNameCamel %>CacheTime: undefined,
      errorMsg: appUtils.getDisplayStringFromError(payload),
    };
  }

}
