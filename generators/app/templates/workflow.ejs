<% if (includeReducer) { %>import Immutable from 'immutable';<% } %>
import { <% if (includeReducer) { %>select, call, <% } %>put, fork, takeLatest } from 'redux-saga/effects';
<% if (includeReducer) { %>
import { BadResponseError } from 'cribspot-core/src/errors';

<% } %>import constants from '../../../constants';

import { NavigationActions } from '../../navigation/actions';
import <%= componentNameCamel %>ActionTypes, { <%= componentName %>Actions } from './actions';
<% if (includeReducer) { %>
import <%= componentNameCamel %>Source from './source';
<% } %>
function* performShowScene() {
  yield put(NavigationActions.push(constants.sceneKey.<%= componentNameConstant %>));
}
<% if (includeReducer) { %>
function* performRefreshData() {
  const { isLoading, <%= componentNameCamel %>CacheLink } = yield select((state) => ({
    isLoading: state.<%= componentNameCamel %>.isLoading,
    <%= componentNameCamel %>CacheLink: state.<%= componentNameCamel %>.<%= componentNameCamel %>CacheLink,
  }));

  if (isLoading) return;

  yield put(<%= componentName %>Actions.invalidateCache());
  yield put(<%= componentName %>Actions.get<%= componentName %>(<%= componentNameCamel %>CacheLink));
}

function* performGet<%= componentName %>({ payload: { <%= componentNameCamel %>Link, invalidateCache } }) {
  try {
    const { authData } = yield select((state) => ({
      authData: state.userAuthData.authData,
    }));

    const responseData = yield call(<%= componentNameCamel %>Source.fetch<%= componentName %>, authData, <%= componentNameCamel %>Link, invalidateCache);
    const <%= componentNameCamel %> = responseData && responseData.<%= componentNameCamel %>;

    if (!<%= componentNameCamel %>) {
      throw new BadResponseError('<%= componentNameCamel %>', responseData);
    }

    yield put(<%= componentName %>Actions.set<%= componentName %>(Immutable.fromJS(<%= componentNameCamel %>), <%= componentNameCamel %>Link));
    yield put(<%= componentName %>Actions.loaded<%= componentName %>());
  } catch (error) {
    yield put(<%= componentName %>Actions.failedToGet<%= componentName %>(error));
  }
}
<% } %>
export default function* rootSaga() {
  yield fork(takeLatest, <%= componentNameCamel %>ActionTypes.CLICKED_VIEW_SCENE, performShowScene);
<% if (includeReducer) { %>  yield fork(takeLatest, <%= componentNameCamel %>ActionTypes.PULLED_TO_REFRESH, performRefreshData);
  yield fork(takeLatest, <%= componentNameCamel %>ActionTypes.GET_<%= componentNameConstant %>, performGet<%= componentName %>);
<% } %>}
