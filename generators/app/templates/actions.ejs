import constants from '../../../constants';
import reduxUtils from '../../../redux-utils';

// --- Action types

const actionTypes = reduxUtils.createActionTypes(constants.namespace.<%= componentNameConstant %>, {
  CLICKED_VIEW_SCENE: null,
<% if (includeReducer) { %>
  PULLED_TO_REFRESH: null,

  INVALIDATE_CACHE: null,

  GET_<%= componentNameConstant %>: null,
  SET_<%= componentNameConstant %>: null,
  LOADED_<%= componentNameConstant %>: null,
  FAILED_TO_GET_<%= componentNameConstant %>: null,
<% } %>});

export default actionTypes;

// --- Action creators

export class <%= componentName %>Actions {

  static clickedViewScene = () =>
    reduxUtils.createEvent(actionTypes.CLICKED_VIEW_SCENE);<% if (includeReducer) { %>

  static pulledToRefresh = () =>
    reduxUtils.createEvent(actionTypes.PULLED_TO_REFRESH);

  static invalidateCache = () =>
    reduxUtils.createEvent(actionTypes.INVALIDATE_CACHE);

  static get<%= componentName %> = (<%= componentNameCamel %>Link) =>
    reduxUtils.createAction(actionTypes.GET_<%= componentNameConstant %>, { <%= componentNameCamel %>Link });

  static set<%= componentName %> = (<%= componentNameCamel %>, <%= componentNameCamel %>Link) =>
    reduxUtils.createAction(actionTypes.SET_<%= componentNameConstant %>, { <%= componentNameCamel %>, <%= componentNameCamel %>Link });

  static loaded<%= componentName %> = () =>
    reduxUtils.createEvent(actionTypes.LOADED_<%= componentNameConstant %>);

  static failedToGet<%= componentName %> = (error) =>
    reduxUtils.createEvent(actionTypes.FAILED_TO_GET_<%= componentNameConstant %>, error);<% } %>

}
